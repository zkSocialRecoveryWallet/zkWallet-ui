/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IEtherServiceFacetInterface extends utils.Interface {
  functions: {
    "etherServiceFacetVersion()": FunctionFragment;
    "getEtherBalance()": FunctionFragment;
    "transferEther(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "etherServiceFacetVersion"
      | "etherServiceFacetVersion()"
      | "getEtherBalance"
      | "getEtherBalance()"
      | "transferEther"
      | "transferEther(address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "etherServiceFacetVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "etherServiceFacetVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEtherBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEtherBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferEther",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEther(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "etherServiceFacetVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "etherServiceFacetVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEtherBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEtherBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEther(address,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IEtherServiceFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEtherServiceFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    etherServiceFacetVersion(overrides?: CallOverrides): Promise<[string]>;

    "etherServiceFacetVersion()"(overrides?: CallOverrides): Promise<[string]>;

    getEtherBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getEtherBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferEther(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferEther(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  etherServiceFacetVersion(overrides?: CallOverrides): Promise<string>;

  "etherServiceFacetVersion()"(overrides?: CallOverrides): Promise<string>;

  getEtherBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getEtherBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferEther(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferEther(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    etherServiceFacetVersion(overrides?: CallOverrides): Promise<string>;

    "etherServiceFacetVersion()"(overrides?: CallOverrides): Promise<string>;

    getEtherBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getEtherBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferEther(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    "transferEther(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;
  };

  filters: {};

  estimateGas: {
    etherServiceFacetVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "etherServiceFacetVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEtherBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getEtherBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferEther(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferEther(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    etherServiceFacetVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "etherServiceFacetVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEtherBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEtherBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferEther(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferEther(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

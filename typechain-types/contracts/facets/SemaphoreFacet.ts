/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ISemaphoreInternal {
  export type VerifierStruct = {
    contractAddress: string;
    merkleTreeDepth: BigNumberish;
  };

  export type VerifierStructOutput = [string, number] & {
    contractAddress: string;
    merkleTreeDepth: number;
  };
}

export interface SemaphoreFacetInterface extends utils.Interface {
  functions: {
    "semaphoreFacetVersion()": FunctionFragment;
    "setVerifiers((address,uint8)[])": FunctionFragment;
    "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "semaphoreFacetVersion"
      | "semaphoreFacetVersion()"
      | "setVerifiers"
      | "setVerifiers((address,uint8)[])"
      | "verifyProof"
      | "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "semaphoreFacetVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "semaphoreFacetVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifiers",
    values: [ISemaphoreInternal.VerifierStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifiers((address,uint8)[])",
    values: [ISemaphoreInternal.VerifierStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "semaphoreFacetVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "semaphoreFacetVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifiers((address,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])",
    data: BytesLike
  ): Result;

  events: {
    "NullifierHashAdded(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProofVerified(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NullifierHashAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NullifierHashAdded(uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProofVerified"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProofVerified(uint256,bytes32)"
  ): EventFragment;
}

export interface NullifierHashAddedEventObject {
  nullifierHash: BigNumber;
}
export type NullifierHashAddedEvent = TypedEvent<
  [BigNumber],
  NullifierHashAddedEventObject
>;

export type NullifierHashAddedEventFilter =
  TypedEventFilter<NullifierHashAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProofVerifiedEventObject {
  groupId: BigNumber;
  signal: string;
}
export type ProofVerifiedEvent = TypedEvent<
  [BigNumber, string],
  ProofVerifiedEventObject
>;

export type ProofVerifiedEventFilter = TypedEventFilter<ProofVerifiedEvent>;

export interface SemaphoreFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SemaphoreFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    semaphoreFacetVersion(overrides?: CallOverrides): Promise<[string]>;

    "semaphoreFacetVersion()"(overrides?: CallOverrides): Promise<[string]>;

    setVerifiers(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVerifiers((address,uint8)[])"(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])"(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  semaphoreFacetVersion(overrides?: CallOverrides): Promise<string>;

  "semaphoreFacetVersion()"(overrides?: CallOverrides): Promise<string>;

  setVerifiers(
    _verifiers: ISemaphoreInternal.VerifierStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVerifiers((address,uint8)[])"(
    _verifiers: ISemaphoreInternal.VerifierStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyProof(
    groupId: BigNumberish,
    signal: BytesLike,
    nullifierHash: BigNumberish,
    externalNullifier: BigNumberish,
    proof: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])"(
    groupId: BigNumberish,
    signal: BytesLike,
    nullifierHash: BigNumberish,
    externalNullifier: BigNumberish,
    proof: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    semaphoreFacetVersion(overrides?: CallOverrides): Promise<string>;

    "semaphoreFacetVersion()"(overrides?: CallOverrides): Promise<string>;

    setVerifiers(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setVerifiers((address,uint8)[])"(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])"(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NullifierHashAdded(uint256)"(
      nullifierHash?: null
    ): NullifierHashAddedEventFilter;
    NullifierHashAdded(nullifierHash?: null): NullifierHashAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProofVerified(uint256,bytes32)"(
      groupId?: BigNumberish | null,
      signal?: null
    ): ProofVerifiedEventFilter;
    ProofVerified(
      groupId?: BigNumberish | null,
      signal?: null
    ): ProofVerifiedEventFilter;
  };

  estimateGas: {
    semaphoreFacetVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "semaphoreFacetVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    setVerifiers(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVerifiers((address,uint8)[])"(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])"(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    semaphoreFacetVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "semaphoreFacetVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVerifiers(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVerifiers((address,uint8)[])"(
      _verifiers: ISemaphoreInternal.VerifierStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "verifyProof(uint256,bytes32,uint256,uint256,uint256[8])"(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
